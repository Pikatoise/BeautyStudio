//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Soloon
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ClientService
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public ClientService()
        {
            this.DocumentByServices = new HashSet<DocumentByService>();
            this.ProductSales = new HashSet<ProductSale>();
        }
    
        public int ID { get; set; }
        public int ClientID { get; set; }
        public int ServiceID { get; set; }
        public string StartTime { get; set; }
        public string Comment { get; set; }
    
        public virtual Client Client { get; set; }
        public virtual Service Service { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DocumentByService> DocumentByServices { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductSale> ProductSales { get; set; }
        ////////////////
        ///
        public string ClientStr
        {
            get
            {
                if(ClientID!=0)
                    if (App.DB.Clients.Any(q => q.ID.Equals(ClientID)))
                    {

                        Client client = App.DB.Clients.Single(q => q.ID.Equals(ClientID));
                        return client.LastName + " " + client.FirstName +" "+ client.Patronymic;
                    }
                return "";
            }
            set
            {
                List<string> ar = value.Split(' ').ToList();
                Client client = new Client();
                client.LastName = ar[0];
                client.FirstName = ar[1];
                client.Patronymic = ar[2];
                ClientID = App.DB.Clients.Single(q => (q.LastName == client.LastName && q.FirstName == client.FirstName && q.Patronymic == client.Patronymic)).ID;
            }
        }
        public string ServiceStr
        {
            get
            {
                if (ServiceID != 0)
                    if (App.DB.Services.Any(q => q.ID.Equals(ServiceID)))
                    {

                        return App.DB.Services.Single(q=> q.ID.Equals(ServiceID)).Title;
                    }
                return "";
            }
            set
            {
                ServiceID = App.DB.Services.Single(q=>q.Title.Equals(value)).ID;
            }
        }
    }
   
}
